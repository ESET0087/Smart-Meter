CREATE TABLE "User"(  
  UserId         bigserial PRIMARY KEY,  
  Username       VARCHAR(100) NOT NULL UNIQUE,  
  PasswordHash   bytea NOT NULL,  
  DisplayName    VARCHAR(150) NOT NULL,  
  Email          VARCHAR(200) NULL,  
  Phone          VARCHAR(30) NULL,  
  LastLoginUtc   TIMESTAMPTZ NULL,
  IsActive       BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE OrgUnit (
  OrgUnitId INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  Type VARCHAR(20) NOT NULL CHECK (Type IN ('Zone','Substation','Feeder','DTR')),
  Name VARCHAR(100) NOT NULL,
  ParentId INT NULL REFERENCES OrgUnit(OrgUnitId)
);
CREATE INDEX idx_orgunit_type ON OrgUnit (Type);

CREATE TABLE Tariff (
  TariffId SERIAL PRIMARY KEY,
  Name VARCHAR(100) NOT NULL,
  EffectiveFrom DATE NOT NULL,
  EffectiveTo DATE NULL,
  BaseRate DECIMAL(18,4) NOT NULL,
  TaxRate DECIMAL(18,4) NOT NULL DEFAULT 0,
  CONSTRAINT CK_Tariff_Range CHECK (BaseRate > 0 AND (EffectiveTo IS NULL OR EffectiveTo > EffectiveFrom))
);
CREATE INDEX idx_tariff_effectivefrom ON Tariff (EffectiveFrom);

CREATE TABLE TodRule (
  TodRuleId SERIAL PRIMARY KEY,
  TariffId INT NOT NULL REFERENCES Tariff(TariffId),
  Name VARCHAR(50) NOT NULL,
  StartTime TIME(0) NOT NULL,
  EndTime TIME(0) NOT NULL,
  RatePerKwh DECIMAL(18,6) NOT NULL,
  isDeleted BOOLEAN DEFAULT FALSE,
  CONSTRAINT CK_TodRule_Range CHECK (StartTime < EndTime)
);
CREATE INDEX idx_tod_name ON TodRule (Name);

CREATE TABLE TariffSlab (
  TariffSlabId SERIAL PRIMARY KEY,
  TariffId INT NOT NULL REFERENCES Tariff(TariffId),
  FromKwh DECIMAL(18,6) NOT NULL,
  ToKwh DECIMAL(18,6) NOT NULL,
  RatePerKwh DECIMAL(18,6) NOT NULL CHECK (RatePerKwh >= 0),
  isDeleted BOOLEAN DEFAULT FALSE,
  CONSTRAINT CK_TariffSlab_Range CHECK (FromKwh >= 0 AND ToKwh > FromKwh)
);

CREATE TABLE Consumer (
  ConsumerId BIGSERIAL PRIMARY KEY,
  Name VARCHAR(200) NOT NULL,
  Address VARCHAR(500) NULL,
  Phone VARCHAR(30) NULL CHECK (Phone ~ '^(0|\+91\s?)?[6-9][0-9]{9}$'),
  Email VARCHAR(200) NULL CHECK (Email ~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'),
  OrgUnitId INT NOT NULL REFERENCES OrgUnit(OrgUnitId),
  TariffId INT NOT NULL REFERENCES Tariff(TariffId),
  Status VARCHAR(20) NOT NULL DEFAULT 'Active' CHECK (Status IN ('Active','Inactive')),
  CreatedAt TIMESTAMPTZ NOT NULL DEFAULT NOW(), 
  CreatedBy VARCHAR(100) NOT NULL DEFAULT 'system',
  UpdatedAt TIMESTAMPTZ NULL, 
  UpdatedBy VARCHAR(100) NULL,
  isDeleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE ConsumerAddress (
  AddressId BIGSERIAL PRIMARY KEY,
  ConsumerId BIGINT NOT NULL UNIQUE REFERENCES Consumer(ConsumerId),
  HouseNo VARCHAR(100) NOT NULL,
  City VARCHAR(100) NOT NULL,
  State VARCHAR(100) NOT NULL,
  PinCode VARCHAR(20) NOT NULL
);

CREATE TABLE Meter (
  MeterSerialNo VARCHAR(50) NOT NULL PRIMARY KEY,
  IpAddress VARCHAR(45) NOT NULL,
  ICCID VARCHAR(30) NOT NULL,
  IMSI VARCHAR(30) NOT NULL,
  Manufacturer VARCHAR(100) NOT NULL,
  Firmware VARCHAR(50) NULL,
  Category VARCHAR(50) NOT NULL,
  InstallTsUtc TIMESTAMPTZ NOT NULL, 
  Status VARCHAR(20) NOT NULL DEFAULT 'Active'
         CHECK (Status IN ('Active','Inactive','Decommissioned')),
  ConsumerId BIGINT NULL REFERENCES Consumer(ConsumerId)
);

CREATE TABLE MeterReadings (
  ReadingId BIGSERIAL PRIMARY KEY,
  MeterSerialNo VARCHAR(50) NOT NULL REFERENCES Meter(MeterSerialNo),
  ReadingDatetime TIMESTAMPTZ NOT NULL,  
  EnergyConsumed DECIMAL(10,3) NOT NULL,
  Voltage DECIMAL(7,2) NOT NULL,
  Current DECIMAL(7,3) NOT NULL,
  CONSTRAINT CK_Reading_Energy CHECK (EnergyConsumed >= 0)
);

CREATE TABLE Bill (
  BillId BIGSERIAL PRIMARY KEY,
  ConsumerId BIGINT NOT NULL REFERENCES Consumer(ConsumerId),
  MeterSerialNo VARCHAR(50) NOT NULL REFERENCES Meter(MeterSerialNo),
  BillingPeriodStart DATE NOT NULL,
  BillingPeriodEnd DATE NOT NULL,
  TotalUnitsConsumed NUMERIC(18,6) NOT NULL,
  BaseAmount NUMERIC(18,4) NOT NULL,
  TaxAmount NUMERIC(18,4) NOT NULL DEFAULT 0,
  TotalAmount NUMERIC(18,4) GENERATED ALWAYS AS (BaseAmount + TaxAmount) STORED,
  GeneratedAt TIMESTAMPTZ NOT NULL DEFAULT NOW(), 
  PaymentDate DATE DEFAULT CURRENT_DATE,
  DueDate DATE NOT NULL,
  isPaid BOOLEAN DEFAULT FALSE,
  DiscDate TIMESTAMPTZ NULL 
);

CREATE TABLE Arrears (
  ArrearId BIGSERIAL PRIMARY KEY,
  ConsumerID BIGINT NOT NULL REFERENCES Consumer(ConsumerId),
  BillId BIGINT NOT NULL UNIQUE REFERENCES Bill(BillId),
  ArrearType VARCHAR(20) CHECK (ArrearType IN ('Overdue','Penalty','Interest')),
  PaidStatus VARCHAR(20) NOT NULL DEFAULT 'Unpaid'
    CHECK (PaidStatus IN ('Paid','Unpaid'))
);

CREATE TABLE TarrifDetails (
  TarrifDetailId INT PRIMARY KEY,
  TarrifId INT NOT NULL REFERENCES Tariff(TariffId),
  TariffSlabId INT NOT NULL REFERENCES TariffSlab(TariffSlabId),
  TodRuleId INT NOT NULL REFERENCES TodRule(TodRuleId)
);